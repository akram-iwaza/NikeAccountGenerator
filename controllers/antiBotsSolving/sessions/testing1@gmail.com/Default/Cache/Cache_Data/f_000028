{"version":3,"sources":["webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-new-relic-npm-1.3.2-e0438f449e-2bc5ea78f5.zip/node_modules/@nike/ux-tread-new-relic/es/addPageAction.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-new-relic-npm-1.3.2-e0438f449e-2bc5ea78f5.zip/node_modules/@nike/ux-tread-new-relic/es/constants.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-new-relic-npm-1.3.2-e0438f449e-2bc5ea78f5.zip/node_modules/@nike/ux-tread-new-relic/es/newRelicInstance.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-optimizely-npm-4.6.1-3d8292f1e2-b4f15f7f2f.zip/node_modules/@nike/ux-tread-optimizely/dist/constants.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-optimizely-npm-4.6.1-3d8292f1e2-b4f15f7f2f.zip/node_modules/@nike/ux-tread-optimizely/dist/index.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-optimizely-npm-4.6.1-3d8292f1e2-b4f15f7f2f.zip/node_modules/@nike/ux-tread-optimizely/dist/util.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-partnercart-npm-1.7.3-0d38aed5eb-537e168010.zip/node_modules/@nike/ux-tread-partnercart/es/api/create-partnercart-preorder.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-partnercart-npm-1.7.3-0d38aed5eb-537e168010.zip/node_modules/@nike/ux-tread-partnercart/es/api/get-partnercart-preorder.js","webpack:////tmp/jenkins/workspace/nts_nike_shop-components_1.153.0/.yarn/cache/@nike-ux-tread-partnercart-npm-1.7.3-0d38aed5eb-537e168010.zip/node_modules/@nike/ux-tread-partnercart/es/constants.js"],"names":["addPageAction","name","args","Error","err","console","error","concat","REQUIRED_FIELDS","NEWRELIC_ERROR","NEWRELIC_UNAVAILABLE","MESSAGES","JS_ERROR","newRelicInstance","window","newrelic","Object","defineProperty","exports","value","COOKIE_NAME","enumerable","get","_util","getOptimizelyUserId","sanitizeVariant","sanitizeForcedVariant","getForcedVariant","getForcedRollout","filterRunningExperiments","getExperiments","getExperimentDriver","getDriver","mapExperimentKeys","mapFeatureKeys","activateExperiment","activateExperiments","getVariation","getVariations","getRollouts","getVariantVariables","getFeatureFlagByExperimentId","getFeatureFlagsByExperimentId","getForcedExperiments","_constants","getFeatureVariable","getFeatureVariableObject","sanitizeRollout","getForced","getExperiment","ACTIVE_ROLLOUT_KEY","_optimizelySdk","_interopRequireDefault","_exenv","_universalCookie","_qs","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","_toConsumableArray","arr","_arrayWithoutHoles","Array","isArray","_arrayLikeToArray","_iterableToArray","iter","Symbol","iterator","from","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","test","_nonIterableSpread","TypeError","len","arr2","cookie","canUseDOM","undefined","experiment","datafile","filterExperiments","experiments","groups","group","e","forcedVariant","experimentKey","optimizelyClient","projectConfigManager","getConfig","qualifiedVariants","variations","map","variant","toUpperCase","indexOf","params","parse","document","location","search","allowDots","ignoreQueryPrefix","forcePreview","param","sanitizeForced","forcedRollout","featureFlags","find","rollout","optClient","user","attributes","activate","gfv","sanitize","setForcedVariation","shouldActivate","activeExperiments","freshRollouts","isFeatureEnabled","status","props","createInstance","skipJSONValidation","experimentId","featureFlag","experimentIds","includes","pm","variables","featureKey","variableKey","featureVariableObject","type","getFeatureVariableInteger","getFeatureVariableDouble","getFeatureVariableBoolean","getFeatureVariableString","r","exp","Boolean","variation","variable","_ref","id","flag","createPartnerCartPreorder","token","visitId","visitorId","_ref$host","host","country","language","channel","cartId","currency","paypalClicked","items","_ref$appId","appId","_ref$cloudStack","cloudStack","_ref$experiments","method","credentials","headers","body","JSON","stringify","pageActionName","getPartnerCartPreorder","BUY_PARTNER_CART_PREORDER","BUY_PUT_OPTIONS","Accept","BUY_GET_OPTIONS","BUY_DOMAIN_CLOUDSTACK"],"mappings":"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","file":"npm.nike~ce13f8e0.chunk.9bcd48.js","sourcesContent":["import newRelicInstance from './newRelicInstance';\nimport { REQUIRED_FIELDS, NEWRELIC_ERROR } from './constants';\n/**\n * addPageAction\n *\n * @memberof ux-tread-new-relic\n * @description Reports a Browser PageAction event to New Relic Insights along with a name and optional attributes in a consistent manner across all Nike Web Experiences.\n * @param {string} name - Name or Category of the action (* required for New Relic).\n * @param {object} args - one or more key/value pairs to report to Insights.\n * @example <caption>Usage of `addPageAction`</caption>\n * import { addPageAction } from '@nike/ux-tread-new-relic';\n *\n * // Rest of function implementation in here\n * const eventData = {\n *   error: 'Error goes here',\n *   info: 'More information',\n *   message: 'Doh! This is the reason for your error',\n * };\n *\n * addPageAction('jsErrorData', eventData);\n */\n\nvar addPageAction = function addPageAction(name, args) {\n  try {\n    // name is a required field for this New Relic function, if we don't have it,\n    // then don't even attempt to hit the New Relic library.\n    if (!name) throw new Error(REQUIRED_FIELDS);\n    return newRelicInstance().addPageAction(name, args);\n  } catch (err) {\n    return console.error(\"\".concat(NEWRELIC_ERROR, \" \").concat(err)); // eslint-disable-line\n  }\n};\n\nexport default addPageAction;\n//# sourceMappingURL=addPageAction.js.map","export var REQUIRED_FIELDS = 'Name and Start are required fields';\nexport var NEWRELIC_ERROR = 'Error sending metrics to New Relic';\nexport var NEWRELIC_UNAVAILABLE = 'New Relic is not present on the window object'; // Generic Messages\n\nexport var MESSAGES = {\n  JS_ERROR: 'jsError'\n};\n//# sourceMappingURL=constants.js.map","/**\n * @ignore\n * newRelicInstance\n * @description a helper function to encapsulate accessing the window New Relic object.\n * @returns {object} an object that contains a New Relic instance.\n */\n// NOTE guarding for presence of window before trying to access New Relic to avoid uncaught errors\nvar newRelicInstance = function newRelicInstance() {\n  return window && window.newrelic;\n};\n\nexport default newRelicInstance;\n//# sourceMappingURL=newRelicInstance.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.COOKIE_NAME = void 0;\n\n/**\n * @name COOKIE_NAME\n * @constant\n * @type {string}\n * @description Optimized Experience cookie name; <code>'anonymousId'</code>.\n * @memberof ux-tread-optimizely\n * @default\n */\nvar COOKIE_NAME = 'anonymousId';\nexports.COOKIE_NAME = COOKIE_NAME;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"getOptimizelyUserId\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getOptimizelyUserId;\n  }\n});\nObject.defineProperty(exports, \"sanitizeVariant\", {\n  enumerable: true,\n  get: function get() {\n    return _util.sanitizeVariant;\n  }\n});\nObject.defineProperty(exports, \"sanitizeForcedVariant\", {\n  enumerable: true,\n  get: function get() {\n    return _util.sanitizeForcedVariant;\n  }\n});\nObject.defineProperty(exports, \"getForcedVariant\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getForcedVariant;\n  }\n});\nObject.defineProperty(exports, \"getForcedRollout\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getForcedRollout;\n  }\n});\nObject.defineProperty(exports, \"filterRunningExperiments\", {\n  enumerable: true,\n  get: function get() {\n    return _util.filterRunningExperiments;\n  }\n});\nObject.defineProperty(exports, \"getExperiments\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getExperiments;\n  }\n});\nObject.defineProperty(exports, \"getExperimentDriver\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getExperimentDriver;\n  }\n});\nObject.defineProperty(exports, \"getDriver\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getDriver;\n  }\n});\nObject.defineProperty(exports, \"mapExperimentKeys\", {\n  enumerable: true,\n  get: function get() {\n    return _util.mapExperimentKeys;\n  }\n});\nObject.defineProperty(exports, \"mapFeatureKeys\", {\n  enumerable: true,\n  get: function get() {\n    return _util.mapFeatureKeys;\n  }\n});\nObject.defineProperty(exports, \"activateExperiment\", {\n  enumerable: true,\n  get: function get() {\n    return _util.activateExperiment;\n  }\n});\nObject.defineProperty(exports, \"activateExperiments\", {\n  enumerable: true,\n  get: function get() {\n    return _util.activateExperiments;\n  }\n});\nObject.defineProperty(exports, \"getVariation\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getVariation;\n  }\n});\nObject.defineProperty(exports, \"getVariations\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getVariations;\n  }\n});\nObject.defineProperty(exports, \"getRollouts\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getRollouts;\n  }\n});\nObject.defineProperty(exports, \"getVariantVariables\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getVariantVariables;\n  }\n});\nObject.defineProperty(exports, \"getFeatureFlagByExperimentId\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getFeatureFlagByExperimentId;\n  }\n});\nObject.defineProperty(exports, \"getFeatureFlagsByExperimentId\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getFeatureFlagsByExperimentId;\n  }\n});\nObject.defineProperty(exports, \"getForcedExperiments\", {\n  enumerable: true,\n  get: function get() {\n    return _util.getForcedExperiments;\n  }\n});\nObject.defineProperty(exports, \"COOKIE_NAME\", {\n  enumerable: true,\n  get: function get() {\n    return _constants.COOKIE_NAME;\n  }\n});\n\nvar _util = require(\"./util\");\n\nvar _constants = require(\"./constants\");","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVariantVariables = exports.getFeatureVariable = exports.getFeatureVariableObject = exports.getFeatureFlagByExperimentId = exports.getFeatureFlagsByExperimentId = exports.getDriver = exports.getExperimentDriver = exports.filterRunningExperiments = exports.activateExperiments = exports.getRollouts = exports.getVariations = exports.activateExperiment = exports.getVariation = exports.getForcedRollout = exports.sanitizeRollout = exports.getForcedVariant = exports.getForced = exports.getForcedExperiments = exports.sanitizeForcedVariant = exports.sanitizeVariant = exports.getExperiment = exports.getExperiments = exports.mapFeatureKeys = exports.mapExperimentKeys = exports.getOptimizelyUserId = exports.ACTIVE_ROLLOUT_KEY = void 0;\n\nvar _optimizelySdk = _interopRequireDefault(require(\"@optimizely/optimizely-sdk\"));\n\nvar _exenv = require(\"exenv\");\n\nvar _universalCookie = _interopRequireDefault(require(\"universal-cookie\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @name ACTIVE_ROLLOUT_KEY\n * @description A constant for <code>'1'</code>, standardized usage for a feature that has been determined to rollout for a given user.\n * @memberof ux-tread-optimizely\n */\nvar ACTIVE_ROLLOUT_KEY = '1';\n/**\n * @name getOptimizelyUserId\n * @description Returns a unique user identifier via the <code>anonymousId</code> cookie.\n * @function\n * @param {object} [cookies] - For server&ndash;side usage, the <code>req.cookies</code> Object to get the cookie from\n * @returns {string} <code>optExtiD</code> cookie value.\n * @memberof ux-tread-optimizely\n * @example <caption>Getting the optimizely user id</caption>\n * const user = getOptimizelyUserId();\n * @example <caption>Getting the optimizely user id on the server</caption>\n * app.get('/', (req, res) => {\n *   const user = getOptimizelyUserId(req.cookies);\n * });\n */\n\nexports.ACTIVE_ROLLOUT_KEY = ACTIVE_ROLLOUT_KEY;\n\nvar getOptimizelyUserId = function getOptimizelyUserId(cookie) {\n  var cookies = new _universalCookie[\"default\"](_exenv.canUseDOM ? undefined : cookie);\n  return cookies.get('anonymousId');\n};\n/**\n * @function mapExperimentKeys\n * @description Useful to reduce experiment data objects down to their respective keys\n * @param {object} experiment - data object\n * @returns {string} Experiment <code>key</code> property.\n * @memberof ux-tread-optimizely\n * @example <caption>Reducing experiment data objects down to their respective keys</caption>\n *  const experiments = getExperiments(datafile);\n *  const experimentKeys = experiments.map(\n *    mapExperimentKeys\n *  );\n */\n\n\nexports.getOptimizelyUserId = getOptimizelyUserId;\n\nvar mapExperimentKeys = function mapExperimentKeys(experiment) {\n  return experiment.key;\n};\n\nexports.mapExperimentKeys = mapExperimentKeys;\nvar mapFeatureKeys = mapExperimentKeys;\n/**\n * @name getExperiments\n * @description Provided a datafile, extracts and returns experiments.\n * @function\n * @param {object} datafile - The datafile to extract experiments from\n * @param {Function} [filterExperiments] - Function to filter experiments by\n * @returns {Array} An array of filtered experiment data objects.\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.filterRunningExperiments\n * @example <caption>Parsing the Optimizely datafile for an Array of all experiment data objects</caption>\n * const experiments = getExperiments(datafile);\n */\n\nexports.mapFeatureKeys = mapFeatureKeys;\n\nvar getExperiments = function getExperiments(datafile) {\n  var filterExperiments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var experiments = [];\n\n  try {\n    experiments = _toConsumableArray(datafile.experiments);\n    datafile.groups.forEach(function (group) {\n      experiments = [].concat(_toConsumableArray(experiments), _toConsumableArray(group.experiments));\n    });\n    return filterExperiments ? experiments.filter(filterExperiments) : experiments;\n  } catch (e) {\n    return experiments;\n  }\n};\n/**\n * @name getExperiment\n * @description Provided a datafile, extracts and returns experiments.\n * @function\n * @param {object} datafile - The datafile to extract experiments from\n * @param {Function} [filterExperiments] - Function to filter experiments by\n * @returns {Array} An array of filtered experiment data objects.\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.filterRunningExperiments\n * @example <caption>Parsing the Optimizely datafile for an Array of all experiment data objects</caption>\n * const myExperiment = getExperiment(datafile, (experiment) => experiment.key === 'my_experiment');\n */\n\n\nexports.getExperiments = getExperiments;\n\nvar getExperiment = function getExperiment(datafile, filterExperiments) {\n  return getExperiments(datafile, filterExperiments)[0];\n};\n/**\n * @name sanitizeVariant\n * @description Provided a potential variation key and an <code>optimizelyClient</code> to sanitize against, returns either the qualified variation key or <code>undefined</code>.\n * @function\n * @param {string} forcedVariant - Variant key to potentially force\n * @param {string} experimentKey - Experiment name\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @see module:ux-tread-optimizely.sanitizeVariant\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#client|Optimizely Client}\n * @returns {string} A sanitized <code>forcedVariant</code> or <code>undefined</code>.\n * @memberof ux-tread-optimizely\n * @example <caption>Sanitizes a bad variant</caption>\n *  console.log(\n *    sanitizeVariant(\n *      `bad-variant-${Math.random()}`,\n *      'my_experiment',\n *      optimizelyClient,\n *    )\n * );\n */\n\n\nexports.getExperiment = getExperiment;\n\nvar sanitizeVariant = function sanitizeVariant(forcedVariant, experimentKey, optimizelyClient) {\n  if (!forcedVariant) return undefined;\n\n  if (optimizelyClient && optimizelyClient.projectConfigManager.getConfig()) {\n    var experiment = function () {\n      var experiments = getExperiments(optimizelyClient.projectConfigManager.getConfig());\n\n      for (var i = 0; i < experiments.length; i += 1) {\n        if (experiments[i].key === experimentKey) return experiments[i];\n      }\n\n      return undefined;\n    }();\n\n    if (!experiment) return undefined;\n    var qualifiedVariants = experiment.variations.map(function (variant) {\n      return variant.key.toUpperCase();\n    });\n    return qualifiedVariants.indexOf(forcedVariant.toUpperCase()) > -1 ? qualifiedVariants[qualifiedVariants.indexOf(forcedVariant.toUpperCase())] : undefined;\n  }\n\n  return undefined;\n}; // kinda needed for 1.x backwards compatibility\n\n\nexports.sanitizeVariant = sanitizeVariant;\nvar sanitizeForcedVariant = sanitizeVariant;\n/**\n * @returns {string} the default Optimizely project identifier.\n * @see {@link https://app.optimizely.com/v2/projects/9011010262/experiments|Production Experiments}\n */\n\n/**\n * @name getForcedExperiments\n * @description Returns a variant (or rollout) to force or undefined\n * @function\n * @param {string} [key='opxp'] - Key that experiment names are prefaced with, ex: <code>'opxp'</code> for <code>?opxp.my-experiment=A</code>\n * @returns {object} Experiment/Variant key value pairs for forced experiments, ex: <code>{ 'my-experiment': 'A' }</code>\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.getForced\n * @example <caption>Getting a variant to force</caption>\n * const forcedExperiments = getForcedExperiments();\n */\n\nexports.sanitizeForcedVariant = sanitizeForcedVariant;\n\nvar getForcedExperiments = function getForcedExperiments() {\n  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'opxp';\n\n  var params = _exenv.canUseDOM && _qs[\"default\"].parse(document.location.search, {\n    allowDots: true,\n    ignoreQueryPrefix: true\n  });\n\n  return params && params[key] || {};\n};\n/**\n * @name getForced\n * @description Returns a variant (or rollout) to force or undefined\n * @function\n * @param {string} key - Experiment identifer, ie: \"my_experiment\"\n * @param {object} [forcePreview] - An Object that mocks the opxp URL paramater structure\n * @param {object} [optimizelyClient] - An optional <code>optimizelyClient</code> instance to sanitize against\n * @param {object} param - Key such as <code>\"opxp\"</code> or <code>\"oprp\"</code> to parse for forced items\n * @param {Function} sanitizeForced - Provided a <code>forcedItem</code>, <code>key</code>, and <code>optimizelyClient</code>, returns whether or not to force the item\n * @returns {string} A variant to force or undefined.\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.sanitizeVariant\n * @see {@link https://pages.github.nike.com/UXFoundation/exp-playbook//in-the-field/dark-deploy/|Dark Deploy}\n * @example <caption>Getting a variant to force</caption>\n * const variant = getForcedVariant('my_experiment');\n * @example <caption>Getting a variant to force from a supplied Object instead of URL</caption>\n * const variant = getForcedVariant(\n *   'my_experiment', { my_experiment: 'B' },\n * );\n * @example <caption>Getting a sanitized variant to force</caption>\n *  const variant = getForcedVariant(\n *    'my_experiment', undefined, optimizelyClient,\n *  );\n */\n\n\nexports.getForcedExperiments = getForcedExperiments;\n\nvar getForced = function getForced(key, forcePreview, optimizelyClient, param, sanitizeForced) {\n  var params = getForcedExperiments(param);\n  var forcedVariant = forcePreview && forcePreview[param] && forcePreview[param][key] || params[key];\n  return optimizelyClient ? sanitizeForced(forcedVariant, key, optimizelyClient) : forcedVariant;\n};\n/**\n * @name getForcedVariant\n * @description Returns a variant to force or undefined\n * @function\n * @param {string} experiment - Experiment identifer, ie: \"my_experiment\"\n * @param {object} [forcePreview] - An Object that mocks the opxp URL paramater structure\n * @param {object} [optimizelyClient] - An optional optimizelyClient instance to sanitize against\n * @returns {string} A variant to force or undefined.\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.sanitizeVariant\n * @see {@link https://pages.github.nike.com/UXFoundation/exp-playbook//in-the-field/dark-deploy/|Dark Deploy}\n * @example <caption>Getting a variant to force</caption>\n * const variant = getForcedVariant('my_experiment');\n * @example <caption>Getting a variant to force from a supplied Object instead of URL</caption>\n * const variant = getForcedVariant(\n *   'my_experiment', { my_experiment: 'B' },\n * );\n * @example <caption>Getting a sanitized variant to force</caption>\n *  const variant = getForcedVariant(\n *    'my_experiment', undefined, optimizelyClient,\n *  );\n */\n\n\nexports.getForced = getForced;\n\nvar getForcedVariant = function getForcedVariant(experiment, forcePreview, optimizelyClient) {\n  return getForced(experiment, forcePreview, optimizelyClient, 'opxp', sanitizeForcedVariant);\n};\n/**\n * @name sanitizeRollout\n * @description Sanitizes the presense of a rollout in <code>optimizelyClient</code>\n * @memberof ux-tread-optimizely\n * @function\n * @param {string} forcedRollout - rollout key indentifier\n * @param {object} optimizelyClient - <code>optimizelyClient</code> instance to sanitize&nbsp;against\n */\n\n\nexports.getForcedVariant = getForcedVariant;\n\nvar sanitizeRollout = function sanitizeRollout(forcedRollout, optimizelyClient) {\n  return optimizelyClient.projectConfigManager.getConfig().featureFlags.map(mapFeatureKeys).find(function (rollout) {\n    return rollout === forcedRollout;\n  }) ? forcedRollout : undefined;\n};\n/**\n * @name getForcedRollout\n * @description Returns a rollout to force or undefined\n * @memberof ux-tread-optimizely\n * @function\n * @param {string} rollout - rollout key indentifier\n * @param {object} [forcePreview] - An Object that mocks the opxp URL paramater structure\n * @param {object} optimizelyClient - <code>optimizelyClient</code> instance to sanitize&nbsp;against\n * @returns a potentially forced rollout. If <code>optimizelyClient</code> is truthy, sanitizes the rollout against the datafile\n */\n\n\nexports.sanitizeRollout = sanitizeRollout;\n\nvar getForcedRollout = function getForcedRollout(rollout, forcePreview, optimizelyClient) {\n  // dont sanitize based on experimentation\n  var forcedRollout = getForced(rollout, forcePreview, undefined, 'oprp');\n  return optimizelyClient ? sanitizeRollout(rollout, optimizelyClient) && forcedRollout // sanitize on rollout\n  : forcedRollout;\n};\n/**\n * @name getVariation\n * @description Syncronously gets a variation key of a given experiment for a given user.\n * @function\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @param {string} experiment - experiment identifiers\n * @param {string} [user=getOptimizelyUserId()] - Unique user identifier\n * @param {object} [attributes] - Attributes Object to pass to Experiments API\n * @param {boolean|Function} [activate=true] - Whether to call <code>optimizelyClient.activate</code> or <code>optimizelyClient.getVariation</code>\n * @param {Function} [gfv=getForcedVariant] - Function that accepts an experiment name and returns either a variant to force or&nbsp;<code>undefined</code>\n * @param {boolean} [sanitize=true] - Whether or not to sanitize potential forced&nbsp;varaitions\n * @returns {Promise} - Promise that resolves with a variationKey.\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.getVariation\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#client|Optimizely Client}\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#targeting|User Attributes}\n * @example <caption>Syncrounsously retrieve a <code>variationKey</code> from the Optimizely&nbsp;API</caption>\n * const variationKey = getVariation(optimizelyClient, experiment, user, { foo: 'bar' });\n * console.log(`Optimizely says ${user} should be in variation ${variationKey} of the ${experiment} experiment.`);\n * @example <caption>Syncrounsously retrieve a <code>variationKey</code> with custom force&nbsp;bucketing</caption>\n * const forceBucket = (experiment) => {\n *   if (experiment === 'foo') return 'B';\n *   // it is important to return undefined (falsy) when not force bucketing\n * };\n * const variationKey = getVariation(optimizelyClient, experiment, user, { foo: 'bar' }, false, forceBucket);\n * @example <caption>Custom force&nbsp;bucketing with sanitization</caption>\n * const forceBucket = (experiment) => {\n *   if (experiment === 'foo') return (\n *     // remember it is on your to sanitize when custom force bucketing\n *     sanitizeVariant('B', experiment, optimizelyClient)\n *   );\n *   // it is important to return undefined (falsy) when not force bucketing\n * };\n * const variationKey = getVariation(optimizelyClient, experiment, user, { foo: 'bar' }, false, forceBucket);\n * @example <caption>Syncronously get a <code>variationKey</code> without sanitization</caption>\n * const variationKey = getVariation(optimizelyClient, experiment, user, { foo: 'bar' }, false, undefined, false);\n * @example <caption>Syncronously get a <code>variationKey</code> without force&nbsp;bucketing</caption>\n * const variationKey = getVariation(optimizelyClient, experiment, user, { foo: 'bar' }, false, () => undefined);\n * @example <caption>As of version <code>3.3.0</code>, conditionally allow Optimizely to \"ping home\" by supplying a function to the <code>activate</code>&nbsp;property</caption>\n * // imagine activeExperiments is a flat Object of experiment:variant key:value pairs such as { experiment: 'A' }\n * // if we have a cached variant for an experiment, and getVariant is the smae value, we don't need to call activate which makes a network request\n * const shouldActivate = (optClient, experiment, user, attributes) => (\n   !activeExperiments[experiment] || activeExperiments[experiment] !== optClient.getVariation(experiment, user, attributes)\n );\n * const variationKey = getVariation(optimizelyClient, experiment, user, { foo: 'bar' }, shouldActivate);\n */\n\n\nexports.getForcedRollout = getForcedRollout;\n\nvar getVariation = function getVariation(optClient, experiment) {\n  var user = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getOptimizelyUserId();\n  var attributes = arguments.length > 3 ? arguments[3] : undefined;\n  var activate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var gfv = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : getForcedVariant;\n  var sanitize = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  var forcedVariant = gfv && typeof gfv === 'function' && gfv(experiment, undefined, sanitize && optClient);\n\n  if (forcedVariant) {\n    optClient.setForcedVariation(experiment, user, forcedVariant);\n    return forcedVariant;\n  }\n\n  var shouldActivate = typeof activate === 'function' ? activate(optClient, experiment, user, attributes, activate, gfv, sanitize) : activate;\n  return optClient[shouldActivate ? 'activate' : 'getVariation'](experiment, user, attributes);\n};\n/**\n * @name activateExperiment\n * @description Syncronously activates a given experiment for a given user.\n * @function\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @param {string} experiment - experiment identifiers\n * @param {string} [user=getOptimizelyUserId()] - Unique user identifier\n * @param {object} [attributes] - Attributes Object to pass to Experiments API\n * @param {Function} [gfv=getForcedVariant] - Function that accepts an experiment name and returns either a variant to force or&nbsp;<code>undefined</code>\n * @param {boolean} [sanitize=true] - Whether or not to sanitize potential forced&nbsp;varaitions\n * @returns {Promise} - Promise that resolves with a variationKey.\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.getVariation\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#client|Optimizely Client}\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#targeting|User Attributes}\n * @example <caption>Activate Optimizely and reference the <code>variationKey</code> retrieved by the Optimizely API</caption>\n * const variationKey = activateExperiment(optimizelyClient, experiment, user, { foo: 'bar' });\n * console.log(`Optimizely says ${user} should be in variation ${variationKey} of the ${experiment} experiment.`);\n * @example <caption>Syncrounsously activate an experiment with custom force&nbsp;bucketing</caption>\n * const forceBucket = (experiment) => {\n *   if (experiment === 'foo') return 'B';\n *   // it is important to return undefined (falsy) when not force bucketing\n * };\n * const variationKey = activateExperiment(optimizelyClient, experiment, user, { foo: 'bar' }, forceBucket);\n * @example <caption>Custom force&nbsp;bucketing with sanitization</caption>\n * const forceBucket = (experiment) => {\n *   if (experiment === 'foo') return (\n *     // remember it is on your to sanitize when custom force bucketing\n *     sanitizeVariant('B', experiment, optimizelyClient)\n *   );\n *   // it is important to return undefined (falsy) when not force bucketing\n * };\n * const variationKey = activateExperiment(optimizelyClient, experiment, user, { foo: 'bar' }, forceBucket);\n * @example <caption>Activate an experiment and reference the <code>variationKey</code> without sanitization</caption>\n * const variationKey = activateExperiment(optimizelyClient, experiment, user, { foo: 'bar' }, undefined, false);\n * @example <caption>Activate an experiment and reference the <code>variationKey</code> without force&nbsp;bucketing</caption>\n * const variationKey = activateExperiment(optimizelyClient, experiment, user, { foo: 'bar' }, () => undefined);\n */\n\n\nexports.getVariation = getVariation;\n\nvar activateExperiment = function activateExperiment(optimizelyClient, experiment) {\n  var user = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getOptimizelyUserId();\n  var attributes = arguments.length > 3 ? arguments[3] : undefined;\n  var gfv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : getForcedVariant;\n  var sanitize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  return getVariation(optimizelyClient, experiment, user, attributes, true, gfv, sanitize);\n};\n/**\n * @name getVariations\n * @description Syncrounsously gets a variation key for a given experiment for a given user\n * @function\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @param {Array} experiments - Array of experiment identifiers\n * @param {string} [user=getOptimizelyUserId()] - Unique user identifier\n * @param {object} [attributes] - Attributes Object to pass to Experiments API\n * @param {boolean} [activate=false] - Whether or not to activate the user in the given experiment or just get a variation&nbsp;key\n * @param {Function} [gfv=getForcedVariant] - Function that accepts an experiment name and returns either a variant to force or&nbsp;<code>undefined</code>\n * @param {boolean} [sanitize=true] - If true sanitizes potential forced&nbsp;variants\n * @returns {object} - Object of experiment: variationKey key value pairs\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.getVariations\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#client|Optimizely Client}\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#targeting|User Attributes}\n * @example <caption>Activate Optimizely and reference the <code>variationKey</code> retrieved by the Optimizely API</caption>\n * const experimentVariations = getVariations(optimizelyClient, [\n *   'my_experiment',\n *   'my_other_experiment',\n * ], user, { 'my_experiment': { foo: 'bar' } });\n *\n * Object.keys(experimentVariations).forEach(experiment => {\n *   console.log(`Optimizely says ${user} should be in variation ${experimentVariations[experiment]} of the ${experiment} experiment.`);\n * });\n */\n\n\nexports.activateExperiment = activateExperiment;\n\nvar getVariations = function getVariations(optClient, experiments, user) {\n  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var activate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var gfv = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : getForcedVariant;\n  var sanitize = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  var activeExperiments = {};\n  experiments.forEach(function (experiment) {\n    activeExperiments[experiment] = getVariation(optClient, experiment, user, attributes, activate, gfv, sanitize);\n  });\n  return activeExperiments;\n};\n/**\n * @name getRollouts\n * @description Syncrounsously gets an Object of active feature rollouts\n * @function\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @param {string} [user=getOptimizelyUserId()] - Unique user identifier\n * @param {object} [attributes] - Attributes Object to pass to Experiments API\n * @param {Function} [gfv=getForcedRollout] - Function that accepts a rollout name and returns a truthy value or&nbsp;<code>undefined</code>\n * @param {boolean} [sanitize=true] - If true sanitizes potential forced&nbsp;variants\n * @returns {object} - Object of active rollouts: 1 key value pairs\n * @memberof ux-tread-optimizely\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#client|Optimizely Client}\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#targeting|User Attributes}\n * @example <caption>Getting active rollouts for a user</caption>\n * const rollouts = getRollouts(optimizelyClient, user, { foo: 'bar' });\n *\n * Object.keys(rollouts).forEach(rollout => {\n *   console.log(`Optimizely says ${user} should be presented feature ${rollout}.`);\n * });\n * @example <caption>Getting active rollouts for a user with a custom force method</caption>\n * const getForcedRollout = (rollout) => (shouldForceRollout(rollout));\n * const rollouts = getRollouts(optimizelyClient, user, { foo: 'bar' }, getForcedRollout);\n * @example <caption>Getting active rollouts for a user with a custom force method and disabling sanitzation</caption>\n * const getForcedRollout = (rollout) => (shouldForceRollout(rollout));\n * const rollouts = getRollouts(optimizelyClient, user, { foo: 'bar' }, getForcedRollout, false);\n */\n\n\nexports.getVariations = getVariations;\n\nvar getRollouts = function getRollouts(optClient, user) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var gfv = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getForcedRollout;\n  var sanitize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  var freshRollouts = {};\n  optClient.projectConfigManager.getConfig().featureFlags.map(mapFeatureKeys).forEach(function (rollout) {\n    var isFeatureEnabled = optClient.isFeatureEnabled(rollout, user, attributes);\n\n    if (gfv(rollout, sanitize && optClient) || isFeatureEnabled) {\n      freshRollouts[rollout] = ACTIVE_ROLLOUT_KEY;\n    }\n  });\n  return freshRollouts;\n};\n/**\n * @name activateExperiments\n * @description Syncrounsously activates experiments for a given user\n * @function\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @param {Array} experiments - Array of experiment identifiers\n * @param {string} [user=getOptimizelyUserId()] - Unique user identifier\n * @param {object} [attributes] - Attributes Object to pass to Experiments API\n * @param {Function} [gfv=getForcedVariant] - Function that accepts an experiment name and returns either a variant to force or&nbsp;<code>undefined</code>\n * @param {boolean} [sanitize=true] - If true sanitizes potential forced&nbsp;variants\n * @returns {object} - Object of experiment: variationKey key value pairs\n * @memberof ux-tread-optimizely\n * @see module:ux-tread-optimizely.activateExperiment\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#client|Optimizely Client}\n * @see {@link https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=node#targeting|User Attributes}\n * @example <caption>Activate Optimizely and reference the <code>variationKey</code> retrieved by the Optimizely API</caption>\n * const activeExperiments = activateExperiments(optimizelyClient, [\n *   'my_experiment',\n *   'my_other_experiment',\n * ], user, { 'my_experiment': { foo: 'bar' } });\n *\n * Object.keys(activeExperiments).forEach(experiment => {\n *   console.log(`Optimizely says ${user} should be in variation ${activeExperiments[experiment]} of the ${experiment} experiment.`);\n * });\n */\n\n\nexports.getRollouts = getRollouts;\n\nvar activateExperiments = function activateExperiments(optClient, experiments, user) {\n  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var gfv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : getForcedVariant;\n  var sanitize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  return getVariations(optClient, experiments, user, attributes, true, gfv, sanitize);\n};\n/**\n * @name filterRunningExperiments\n * @description Filters out non&ndash;running experiments\n * @function\n * @param {string} experiment - An experiment data object to filter\n * @returns {boolean} true if the experiment is running; otherwise false.\n * @memberof ux-tread-optimizely\n * @see getExperiments\n * @example <caption>Filtering out non&ndash;running experiments</caption>\n *  const experiments = getExperiments(datafile);\n *  const runningExperiments = experiments.filter(\n *    filterRunningExperiments,\n *  );\n */\n\n\nexports.activateExperiments = activateExperiments;\n\nvar filterRunningExperiments = function filterRunningExperiments(experiment) {\n  return experiment.status === 'Running';\n};\n/**\n * @name getExperimentDriver\n * @description Provided a datafile, returns an optimizelyClient instance\n * @function\n * @param {object|string} datafile - The datafile to create an optimizelyClient instance from\n * @param {object} props - Optional flat Object of optional properties to pass to <code>optimizely.createInstance</code>\n * @returns {object} An <code>optimizelyClient</code> instance.\n * @memberof ux-tread-optimizely\n * @see {@link https://docs.developers.optimizely.com/full-stack/docs/configure-the-logger|Configuring Optimizely Logger}\n * @example <caption>Filtering out non&ndash;running experiments</caption>\n * const optimizelyClient = getExperimentDriver(datafile);\n */\n\n\nexports.filterRunningExperiments = filterRunningExperiments;\n\nvar getExperimentDriver = function getExperimentDriver(datafile) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return _optimizelySdk[\"default\"].createInstance(_objectSpread({\n    datafile: datafile,\n    skipJSONValidation: true\n  }, props));\n};\n\nexports.getExperimentDriver = getExperimentDriver;\nvar getDriver = getExperimentDriver;\n/**\n * @name getFeatureFlagsByExperimentId\n * @description Provided a datafile and experimentId, returns feature flags that include the experiment\n * @function\n * @param {object} datafile - The datafile to create an optimizelyClient instance from\n * @param {string} experimentId - The id of the experiment\n * @returns {object} An array of filered <code>datafile.featureFlags</code> data objects\n * @memberof ux-tread-optimizely\n * @example <caption>Getting a feature variable data&nbsp;object</caption>\n * const myFeatureVar = getFeatureVariableObject(datafile, ({key}) => key === 'myFeatureVar');\n */\n\nexports.getDriver = getDriver;\n\nvar getFeatureFlagsByExperimentId = function getFeatureFlagsByExperimentId(datafile, experimentId) {\n  return datafile.featureFlags.filter(function (featureFlag) {\n    return featureFlag.experimentIds.includes(experimentId);\n  });\n};\n\nexports.getFeatureFlagsByExperimentId = getFeatureFlagsByExperimentId;\n\nvar getFeatureFlagByExperimentId = function getFeatureFlagByExperimentId(datafile, experimentId) {\n  return getFeatureFlagsByExperimentId(datafile, experimentId)[0] || null;\n};\n/**\n * @name getFeatureVariableObject\n * @description Provided a datafile and filter function, returns a feature variable data object if&nbsp;found\n * @function\n * @param {object|string} datafile - The datafile to create an optimizelyClient instance from\n * @param {Function} filter - A filter function to use with Array.find in matching a feature variable data object <code>optimizely.createInstance</code>\n * @returns {object} An <code>optimizelyClient</code> instance.\n * @memberof ux-tread-optimizely\n * @see {@link https://docs.developers.optimizely.com/full-stack/docs/configure-the-logger|Configuring Optimizely Logger}\n * @example <caption>Getting a feature variable data&nbsp;object</caption>\n * const myFeatureVar = getFeatureVariableObject(datafile, ({key}) => key === 'myFeatureVar');\n */\n\n\nexports.getFeatureFlagByExperimentId = getFeatureFlagByExperimentId;\n\nvar getFeatureVariableObject = function getFeatureVariableObject(datafile, filter) {\n  for (var i = 0; i < datafile.featureFlags.length; i += 1) {\n    var pm = datafile.featureFlags[i].variables.find(filter);\n    if (pm) return pm;\n  }\n\n  return undefined;\n};\n\nexports.getFeatureVariableObject = getFeatureVariableObject;\n\nvar getFeatureVariable = function getFeatureVariable(optClient, featureKey, variableKey) {\n  var user = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getOptimizelyUserId();\n  var attributes = arguments.length > 4 ? arguments[4] : undefined;\n  var featureVariableObject = getFeatureVariableObject(optClient.projectConfigManager.getConfig(), function (variant) {\n    return variant.key === variableKey;\n  });\n  var type = featureVariableObject.type; // defaultValue\n\n  return function () {\n    switch (type) {\n      case 'integer':\n        return optClient.getFeatureVariableInteger(featureKey, variableKey, user, attributes) || null;\n\n      case 'double':\n        return optClient.getFeatureVariableDouble(featureKey, variableKey, user, attributes) || null;\n\n      case 'boolean':\n        return optClient.getFeatureVariableBoolean(featureKey, variableKey, user, attributes) === null ? null : optClient.getFeatureVariableBoolean(featureKey, variableKey, user, attributes);\n\n      case 'string':\n      default:\n        return optClient.getFeatureVariableString(featureKey, variableKey, user, attributes) || null;\n    }\n  }();\n};\n/**\n * @name getVariantVariables\n * @description Returns an Object map, for each experiment, a flat object of variant variable key/value&nbsp;pairs\n * @function\n * @param {object} optimizelyClient - Optimizely Client SDK instance\n * @param {Array} experiments - Array of experiment identifiers\n * @param {string} [user=getOptimizelyUserId()] - Unique user identifier\n * @param {object} [attributes] - Attributes Object to pass to Experiments API\n * @returns {object} A map of experiment keys, each of which is a flat Object of variant variable key/value pairs:<br /><code>{ 'my-experiment': { autoPlay: false } }</code>\n * @memberof ux-tread-optimizely\n * @see {@link https://docs.developers.optimizely.com/full-stack/docs/define-feature-variables|Configure feature variables}\n * @example <caption>Get an object map of variant variables, one for each experiment</caption>\n * const optimizelyClient = getVariantVariables(optClient, ['my-experiment'], 'Phil', { isBoss: true });\n */\n\n\nexports.getFeatureVariable = getFeatureVariable;\n\nvar getVariantVariables = function getVariantVariables(optimizelyClient, experiments, user) {\n  var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var r = {};\n  var datafile = optimizelyClient.projectConfigManager.getConfig();\n  experiments.map(function (experiment) {\n    return getExperiment(datafile, function (exp) {\n      return exp.key === experiment;\n    });\n  }).filter(Boolean).forEach(function (experiment) {\n    r[experiment.key] = {};\n    experiment.variations.forEach(function (variation) {\n      /* istanbul ignore else  */\n      if (variation.variables) variation.variables.forEach(function (variable) {\n        var _getFeatureVariableOb = getFeatureVariableObject(optimizelyClient.projectConfigManager.getConfig(), function (_ref) {\n          var id = _ref.id;\n          return variable.id === id;\n        }),\n            key = _getFeatureVariableOb.key;\n\n        var flag = getFeatureFlagByExperimentId(datafile, experiment.id);\n        /* istanbul ignore else  */\n\n        if (flag) r[experiment.key][key] = getFeatureVariable(optimizelyClient, flag.key, key, user, attributes);\n      });\n    });\n  });\n  return r;\n};\n\nexports.getVariantVariables = getVariantVariables;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { fetchClient, formatHeaders } from '@nike/fetch-client';\nimport { NIKE_API_HOST, DOTCOM_UX_ID } from '@nike/ux-tread-dotcom-constants';\nimport { BUY_PARTNER_CART_PREORDER, BUY_PUT_OPTIONS, BUY_DOMAIN_CLOUDSTACK } from '../constants';\n/**\n * creates a paypal link to checkout with items in cart\n *\n * @param   {string} token - user authentication token\n * @property   {string} id paypal instruction identifier, user generated UUID\n * @property   {string} host Nike API domain host name\n * @property   {string} country getCapitalizedCountry from ux-tread-localization\n * @property   {string} language lang from geo\n * @property   {string} channel where paypal was initiated\n * @property   {string} cartId id of cart checked out\n * @property   {string} currency currency of geo\n * @property   {bool} paypalClicked determines if checkout via paypal\n * @property   {Array} items array of objects containing cart items\n * @property   {Array | undefined} experiments array of experiment variant strings\n * @returns {object} fetch client parsed json response or FetchResponseErrors\n */\n\nexport default function createPartnerCartPreorder(_ref) {\n  var id = _ref.id,\n      token = _ref.token,\n      visitId = _ref.visitId,\n      visitorId = _ref.visitorId,\n      _ref$host = _ref.host,\n      host = _ref$host === void 0 ? NIKE_API_HOST : _ref$host,\n      country = _ref.country,\n      language = _ref.language,\n      channel = _ref.channel,\n      cartId = _ref.cartId,\n      currency = _ref.currency,\n      paypalClicked = _ref.paypalClicked,\n      items = _ref.items,\n      _ref$appId = _ref.appId,\n      appId = _ref$appId === void 0 ? DOTCOM_UX_ID : _ref$appId,\n      _ref$cloudStack = _ref.cloudStack,\n      cloudStack = _ref$cloudStack === void 0 ? BUY_DOMAIN_CLOUDSTACK : _ref$cloudStack,\n      _ref$experiments = _ref.experiments,\n      experiments = _ref$experiments === void 0 ? undefined : _ref$experiments;\n  return fetchClient(\"\".concat(host, \"/\").concat(BUY_PARTNER_CART_PREORDER, \"/\").concat(id), {\n    method: 'PUT',\n    credentials: 'include',\n    headers: _objectSpread(_objectSpread({}, BUY_PUT_OPTIONS), formatHeaders({\n      token: token,\n      visitId: visitId,\n      visitorId: visitorId,\n      appId: appId,\n      cloudStack: cloudStack\n    })),\n    body: JSON.stringify({\n      country: country,\n      language: language,\n      channel: channel,\n      cartId: cartId,\n      currency: currency,\n      paypalClicked: paypalClicked,\n      items: items,\n      experiments: experiments\n    })\n  }, 'Error creating link to Partner Cart.', {\n    pageActionName: 'tread-partnercart-event'\n  });\n}","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { fetchClient, formatHeaders } from '@nike/fetch-client';\nimport { NIKE_API_HOST, DOTCOM_UX_ID } from '@nike/ux-tread-dotcom-constants';\nimport { BUY_PARTNER_CART_PREORDER, BUY_GET_OPTIONS, BUY_DOMAIN_CLOUDSTACK } from '../constants';\n/**\n * get a redirect url for paypal to continue with checkout\n *\n * @param   {string} token - User authenitication token\n * @property   {string} id paypal instruction identifier, user generated UUID\n * @property   {string} host Nike API domain host name\n * @property {Function} fetchClient an instance of fetch, for example, isomorphic-fetch or a wrapper function for fetch\n * @returns {object} fetch client parsed json response or FetchResponseErrors\n */\n\nexport default function getPartnerCartPreorder(_ref) {\n  var id = _ref.id,\n      _ref$host = _ref.host,\n      host = _ref$host === void 0 ? NIKE_API_HOST : _ref$host,\n      token = _ref.token,\n      visitorId = _ref.visitorId,\n      visitId = _ref.visitId,\n      _ref$cloudStack = _ref.cloudStack,\n      cloudStack = _ref$cloudStack === void 0 ? BUY_DOMAIN_CLOUDSTACK : _ref$cloudStack,\n      _ref$appId = _ref.appId,\n      appId = _ref$appId === void 0 ? DOTCOM_UX_ID : _ref$appId;\n  return fetchClient(\"\".concat(host, \"/\").concat(BUY_PARTNER_CART_PREORDER, \"/\").concat(id), {\n    method: 'GET',\n    credentials: 'include',\n    headers: _objectSpread(_objectSpread({}, BUY_GET_OPTIONS), formatHeaders({\n      token: token,\n      visitId: visitId,\n      visitorId: visitorId,\n      appId: appId,\n      cloudStack: cloudStack\n    }))\n  }, 'Error retrieving Partner Cart.', {\n    pageActionName: 'tread-partnercart-event'\n  });\n}","export var BUY_PARTNER_CART_PREORDER = 'buy/partner_cart_preorder/v1';\nvar acceptedHeaderValues = 'application/json; charset=UTF-8';\nexport var BUY_PUT_OPTIONS = {\n  'Content-Type': acceptedHeaderValues,\n  Accept: acceptedHeaderValues\n};\nexport var BUY_GET_OPTIONS = {\n  Accept: acceptedHeaderValues\n};\nexport var BUY_DOMAIN_CLOUDSTACK = 'buy_domain';"],"sourceRoot":""}